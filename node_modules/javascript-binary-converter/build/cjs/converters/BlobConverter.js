"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const binary_1 = require("../utils/binary");
const blob_1 = require("../utils/blob");
const blobUtils = __importStar(require("../utils/image"));
class BlobConverter {
    constructor(original) {
        this.original = original;
    }
    async toUint8Array() {
        const arrayBuffer = await this.toArrayBuffer();
        return new Uint8Array(arrayBuffer);
    }
    async toInt8Array() {
        const arrayBuffer = await this.toArrayBuffer();
        return new Int8Array(arrayBuffer);
    }
    async toArrayBuffer() {
        return await this.original.arrayBuffer();
    }
    async toImage(config) {
        return blobUtils.binaryToImage(this.original, config ? config : undefined); //
    }
    async toCanvas() {
        return (0, blob_1.blobToCanvas)(this.original);
    }
    async toBytes() {
        const uint8 = await this.toUint8Array();
        return (0, binary_1.typedArrayToBytes)(uint8);
    }
    async toDecimalBytes({ isSigned = false } = {}) {
        const arrayBuffer = await this.toArrayBuffer();
        return (0, binary_1.arrayBufferToDecimalBytes)(arrayBuffer, { isSigned });
    }
    /**
     * Returns a base64 string. If you want a dataUrl appended to it, pass {appendDataUrl:true}
     * In Node will always return plain base64
     */
    toBase64(config = { appendDataUrl: false }) {
        return (0, blob_1.blobToBase64)(this.original, config);
    }
}
exports.default = BlobConverter;
//# sourceMappingURL=BlobConverter.js.map