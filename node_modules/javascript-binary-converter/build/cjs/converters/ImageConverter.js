"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const binary_1 = require("../utils/binary");
const crossPlatform_1 = require("../utils/crossPlatform");
const image_1 = require("../utils/image");
class ImageConverter {
    constructor(original) {
        this.original = original;
        if (crossPlatform_1.isNode) {
            throw new Error('ImageConvertor is available only in the browser');
        }
    }
    async toBlob(config) {
        return (0, image_1.imageToBlob)(this.original, { height: config?.height, width: config?.width });
    }
    async toArrayBuffer(config) {
        const blob = await this.toBlob(config);
        return blob.arrayBuffer();
    }
    async toUint8Array() {
        return new Uint8Array(await this.toArrayBuffer()); //
    }
    async toInt8Array() {
        return new Int8Array(await this.toArrayBuffer());
    }
    /**
     * Returns an array of number-like strings, each representing 8 bits.
     */
    async toBytes() {
        const uint8 = await this.toUint8Array();
        const bytes = (0, binary_1.typedArrayToBytes)(uint8);
        return bytes;
    }
    async toDecimalBytes() {
        const bytes = await this.toBytes();
        return (0, binary_1.bytesToIntegers)(bytes);
    }
    toCanvas(config) {
        const w = config?.width || this.original.width;
        const h = config?.height || this.original.height;
        const canvas = (0, image_1.imageToCanvas)(this.original, { width: w, height: h });
        return canvas;
    }
}
exports.default = ImageConverter;
//# sourceMappingURL=ImageConverter.js.map