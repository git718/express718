"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crossPlatform_1 = require("../utils/crossPlatform");
const image_1 = require("../utils/image");
const BlobConverter_1 = __importDefault(require("./BlobConverter"));
class FileConverter extends BlobConverter_1.default {
    constructor(original) {
        super(original);
        if (crossPlatform_1.isNode)
            throw new Error('FileConvertor is available only in the browser');
    }
    /**
     * Convert a File object to an image, whose src is a Blob.
     * Optionally supply a config object with maxSize, refering to the maximal height or width(depending on the proportions).
     */
    async toImage(config) {
        if (config?.validateImage !== false && !this.original.type.match(/image.*/)) {
            throw new Error('File supplied is not an image');
        }
        return (0, image_1.binaryToImage)(this.original, config ? config : undefined);
    }
}
exports.default = FileConverter;
//# sourceMappingURL=FileConverter.js.map