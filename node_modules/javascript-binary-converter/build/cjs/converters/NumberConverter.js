"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const binary_1 = require("../utils/binary");
const hex_1 = require("../utils/hex");
const number_1 = require("../utils/number");
/**
 * This class handles any number|bigint, in any type Number notation(decimal,octal,hex,binary)
 */
class NumberConverter {
    constructor(original) {
        this.original = original;
    }
    toBinary({ precision = 'SINGLE' } = {}) {
        if ((0, number_1.isBigInt)(this.original))
            return (0, binary_1.bigIntegerToBinary)(this.original);
        return (0, number_1.isFloat)(this.original) ? (0, binary_1.floatToBinary)(this.original, { precision }) : (0, binary_1.integerToBinary)(this.original);
    }
    toInteger({ isSigned = false } = {}) {
        if (!isSigned) //@ts-ignore
            return parseInt(this.original);
        const hex = this.original.toString(16);
        return (0, hex_1.hexStringToInteger)(hex, { isSigned });
    }
    /**
     * Does not support bigint(above 32 bit) or floating point.
     */
    toBytes({ endianness = 'BIG' } = {}) {
        return (0, binary_1.getBytesFromInteger)(this.original, { endianness });
    }
    toDecimalBytes({ endianness = 'BIG', isSigned = false } = {}) {
        return (0, binary_1.getDecimalBytesFromInteger)(this.original, { endianness, isSigned });
    }
    toHexString({ precision = 'SINGLE' } = {}) {
        if (typeof this.original === 'number') {
            if ((0, number_1.isFloat)(this.original)) {
                return (0, hex_1.floatToHexString)(this.original, { precision });
            }
            return (0, hex_1.integerToHexaDecimal)(this.original);
        }
        return (0, hex_1.bigIntegerToHexaDecimal)(this.original);
    }
    toFloat({ precision = 'SINGLE' } = {}) {
        const float = (0, hex_1.hexStringToFloat)(this.original.toString(16), { precision });
        return float;
    }
}
exports.default = NumberConverter;
//# sourceMappingURL=NumberConverter.js.map