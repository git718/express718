import { BytesArray, FloatConversionConfig, TypedArray } from "../sharedTypes";
export declare function integerToBinary(decimal: number | bigint): string;
export declare function floatToBinary(float: number, { precision }?: {
    precision?: 'SINGLE' | 'DOUBLE';
}): string;
export declare function binaryToFloat(binary: string, { precision }?: FloatConversionConfig): number;
export declare function bigIntegerToBinary(decimal: number | bigint, nBits?: bigint): string;
export declare function getBytesFromBinary(binaryString: string, { endianness }?: {
    endianness?: 'BIG' | 'LITTLE';
}): string[];
export declare function binaryToInteger(binary: string, isSigned?: boolean): number;
export declare function getSignedInteger(bits: string): number;
export declare function getDecimalFromTwosComplementBinary(binary: string): number;
export declare function typedArrayToBytes(typedArray: TypedArray): string[];
export declare function groupBytes(bytes: Array<string>, groupSize: number): string[];
export declare function getBytesFromInteger(decimal: number | bigint, { endianness }?: {
    endianness?: 'LITTLE' | 'BIG';
}): string[];
export declare function getDecimalBytesFromInteger(decimal: number | bigint, { endianness, isSigned }?: {
    endianness?: 'LITTLE' | 'BIG';
    isSigned?: boolean;
}): number[];
export declare function arrayBufferToBytes(arrayBuffer: ArrayBuffer): string[];
export declare function bytesToIntegers(bytes: BytesArray): number[];
export declare function arrayBufferToDecimalBytes(arrayBuffer: ArrayBuffer, { isSigned }?: {
    isSigned?: boolean;
}): number[];
